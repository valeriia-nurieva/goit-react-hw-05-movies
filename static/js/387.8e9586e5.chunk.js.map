{"version":3,"file":"static/js/387.8e9586e5.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,8BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,qCAAwCC,IADhC,cACzBE,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAkB,mCAAG,WAAOC,GAAP,uFACPN,EAAAA,EAAAA,IAAA,iCAAoCC,EAApC,iCAAoEK,EAApE,gCADO,cACxBH,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,sDAKlBG,EAAY,mCAAG,WAAOC,GAAP,uFACDR,EAAAA,EAAAA,IAAA,kBAAqBQ,EAArB,oBAAmCP,EAAnC,oBADC,cAClBE,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZK,EAAe,mCAAG,WAAOD,GAAP,uFACJR,EAAAA,EAAAA,IAAA,kBAAqBQ,EAArB,4BAA2CP,EAA3C,oBADI,cACrBE,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKfM,EAAe,mCAAG,WAAOF,GAAP,uFACJR,EAAAA,EAAAA,IAAA,kBAAqBQ,EAArB,4BAA2CP,EAA3C,2BADI,cACrBE,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,qD,4LCvBfO,EAAUC,EAAAA,GAAAA,GAAH,wGAOPC,EAAWD,EAAAA,GAAAA,GAAH,uJAQRE,EAAQF,EAAAA,GAAAA,IAAH,6IASLG,EAAQH,EAAAA,GAAAA,IAAH,4E,SCsBlB,EAvCa,WACX,IAAQJ,GAAOQ,EAAAA,EAAAA,MAAPR,GACR,GAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEID,GAAa,GAFjB,UAGyBZ,EAAAA,EAAAA,IAAgBD,GAHzC,OAGUe,EAHV,OAIIJ,EAAUI,GACVF,GAAa,GALjB,gDAOIG,EAAAA,GAAAA,MAAY,iDAPhB,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACjB,KAGF,gCACE,SAACG,EAAD,UACGO,EAAOQ,MACNR,EAAOQ,KAAKC,KAAI,YAA4C,IAAzCnB,EAAwC,EAAxCA,GAAIoB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzC,OACE,UAACjB,EAAD,YACE,SAACE,EAAD,WACA,SAACD,EAAD,CAAOiB,IAAKH,EAAa,GAAD,OA5BnB,mCA4BmB,OAAoBA,GAAiB,0EAA2EI,IAAI,aAE5I,uBAAIH,KACJ,uBAAIC,MALStB,EAQlB,MAENY,IAAa,SAACa,EAAA,EAAD,MAGjB,C","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\nconst API_KEY = '1d9e78535f6a01dcc41594da81e379a7';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`3/trending/all/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMoviesByKeyword = async (query) => {\n    const response = await axios.get(`3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n    return response.data;\n};\n\nexport const getMovieById = async (id) => {\n    const response = await axios.get(`3/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieCredits = async (id) => {\n    const response = await axios.get(`3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieReviews = async (id) => {\n    const response = await axios.get(`3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;    \n}","import styled from 'styled-components';\n\nexport const CastBox = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 100px) / 6);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  row-gap: 4px;\n`;\n\nexport const Image = styled.img`\n  border-radius: 50%;\n  width: 100%;\n  max-width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  object-fit: cover;\n`;\n\nexport const Thumb = styled.div`\ndisplay: block;\n  width: 132px;\n  height: 132px;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { getMovieCredits } from '../../api';\nimport { Loader } from 'components/Loader';\nimport { Image, Thumb, CastBox, CastItem } from './Cast.styled';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    async function getActors() {\n      try {\n        setIsLoading(true);\n        const result = await getMovieCredits(id);\n        setActors(result);\n        setIsLoading(false);\n      } catch (error) {\n        toast.error('Oops! Something went wrong! Please try again.');\n      }\n    }\n    getActors();\n  }, [id]);\n\n  return (\n    <section>\n      <CastBox>\n        {actors.cast &&\n          actors.cast.map(({ id, profile_path, name, character }) => {\n            return (\n              <CastItem key={id}>\n                <Thumb>\n                <Image src={profile_path? `${BASE_IMG_URL}${profile_path}` : 'https://i.pinimg.com/736x/f5/27/41/f52741fb62bf1d821948a49204406bdc.jpg'} alt=\"Actor\"/>\n                </Thumb>\n                <p>{name}</p>\n                <p>{character}</p>\n              </CastItem>\n            );\n          })}\n      </CastBox>\n    {isLoading && <Loader />}\n    </section>\n  );\n};\n\nexport default Cast;"],"names":["axios","API_KEY","getTrendingMovies","response","data","getMoviesByKeyword","query","getMovieById","id","getMovieCredits","getMovieReviews","CastBox","styled","CastItem","Image","Thumb","useParams","useState","actors","setActors","isLoading","setIsLoading","useEffect","result","toast","getActors","cast","map","profile_path","name","character","src","alt","Loader"],"sourceRoot":""}